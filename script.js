document.addEventListener('DOMContentLoaded', () => {
      // --- CORE HELPERS ---
      const $ = (id) => document.getElementById(id);
      const mainContent = document.querySelector('.content');
      const navMenu = $('nav');
      let isMobile = window.innerWidth <= 900;
      const readInt=(id,def)=>parseInt($(id)?.value)||def, readStr=(id,def)=>$(id)?.value||'', checked=id=>$(id)?.checked;
      const randomOf = arr => arr[Math.floor(Math.random()*arr.length)];

      const showToast = (msg = "Copied!") => { const t = $('toast'); t.textContent = msg; t.classList.add('show'); clearTimeout(t.timer); t.timer = setTimeout(() => t.classList.remove('show'), 1500); };
      const copyToClipboard = (element) => { const text = element?.dataset.copytext || element?.textContent || element?.value; if (text) navigator.clipboard.writeText(text).then(() => showToast(), () => showToast("Failed to copy!")); };
      
      const slotReveal = (el, finalText, opts = {}) => { if (!el) return; el.dataset.copytext = finalText; const chars = opts.chars || 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'; el.innerHTML = ''; const spans = [...finalText].map(char => { const s = document.createElement('span'); s.className = 'slot'; if(char === ' ' || (opts.staticChars && opts.staticChars.includes(char))) { s.innerHTML = char === ' ' ? '&nbsp;' : char; } el.appendChild(s); return s; }); let animationFrame; const animate = () => { spans.forEach((span, i) => { if(span.textContent === finalText[i] || (opts.staticChars && opts.staticChars.includes(finalText[i]))) return; if (Math.random() > 0.92) { span.textContent = finalText[i]; span.classList.add('spin'); } else { span.textContent = randomOf(chars); } }); if (spans.some((s,i) => s.textContent !== finalText[i] && !(opts.staticChars && opts.staticChars.includes(finalText[i])))) { animationFrame = requestAnimationFrame(animate); } }; cancelAnimationFrame(animationFrame); animate(); };
      
      const addPanel = (id, title, content, setupLogic) => { const panel = document.createElement('section'); panel.id = `panel-${id}`; panel.className = 'panel'; panel.style.display = 'none'; panel.innerHTML = `<h2>${title}</h2>` + content; mainContent.appendChild(panel); if (setupLogic) setupLogic(panel); };
      
      const setupUI = () => { const sidebar = $('sidebar'), hamburger = $('hamburger'), nav = $('nav'); if (isMobile) sidebar.classList.add('hide'); hamburger.addEventListener('click', () => {sidebar.classList.toggle('hide'); sidebar.classList.toggle('user-opened', !sidebar.classList.contains('hide'))}); window.addEventListener('resize', () => { isMobile = window.innerWidth <= 900; if(isMobile && !sidebar.classList.contains('user-opened')) sidebar.classList.add('hide'); else if(!isMobile) sidebar.classList.remove('hide', 'user-opened'); }); nav.addEventListener('click', (e) => { const tab = e.target.closest('.tab'); if (tab) { nav.querySelectorAll('.tab').forEach(t => t.classList.remove('active')); tab.classList.add('active'); document.querySelectorAll('.panel').forEach(p => p.style.display = 'none'); const targetPanel = $(tab.dataset.target); if (targetPanel) targetPanel.style.display = 'block'; if (isMobile) { sidebar.classList.add('hide'); sidebar.classList.remove('user-opened'); } } const toggle = e.target.closest('.category-toggle'); if(toggle) {toggle.classList.toggle('collapsed');}});(nav.querySelector('.tab.active') || nav.querySelector('.tab')).click(); };
      const animateTitleAndFavicon = () => { const frames=['{Dev Hub}', '[Dev Hub]', '<Dev Hub/>']; const emojis=['💻','⚡️','🚀','⚙️']; const faviconEl=$('favicon'); let i=0; setInterval(()=>{document.title=frames[i%frames.length]; faviconEl.href = `data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>${emojis[i%emojis.length]}</text></svg>`; i++},1500); };
      
      const navStructure = [
        { type: 'tab', id: 'home', icon: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/><polyline points="9 22 9 12 15 12 15 22"/></svg>`, name: 'Home' },
        { type: 'category', title: 'Code & Text', tools: [
          { id: 'json', icon: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M8 10h.01M12 10h.01M16 10h.01"/><path d="M7 21h10a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2z"/></svg>`, name: 'JSON Formatter' },
          { id: 'base64', icon: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M4 11V4h7"/><path d="M8 1a3 3 0 0 1 3 3v5"/><path d="M12 1h7a3 3 0 0 1 3 3v5"/><path d="M12 23H5a3 3 0 0 1-3-3v-5"/><path d="M20 12v5a3 3 0 0 1-3 3h-2.5"/></svg>`, name: 'Base64' },
          { id: 'obfuscator', icon: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M10 21v-4a4 4 0 0 0-4-4H3"/><path d="M14 21v-4a4 4 0 0 1 4-4h3"/><path d="M21 9V8a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v1"/><path d="M12 21v-4a4 4 0 0 0-4-4H3c-1.66 0-3 1.34-3 3s1.34 3 3 3h3"/><path d="M12 21v-4a4 4 0 0 1 4-4h3c1.66 0 3-1.34 3-3s-1.34-3-3-3h-3"/></svg>`, name: 'Code Obfuscator' },
          { id: 'diff', icon: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M12 22V2"/><path d="m17 7-5 5-5-5"/><path d="m7 17 5-5 5 5"/></svg>`, name: 'Diff Checker' }
        ]},
        { type: 'category', title: 'API & Web', tools: [
          { id: 'httprequest', icon: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M7 16.5 2.5 12 7 7.5"/><path d="M17 16.5 21.5 12 17 7.5"/><path d="M14.5 4.5 9.5 19.5"/></svg>`, name: 'HTTP Request Tester' },
          { id: 'jwt', icon: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/><polyline points="14 2 14 8 20 8"/><path d="M10 12.5a2.5 2.5 0 0 1-5 0 2.5 2.5 0 0 1 5 0Z"/><path d="M17 12.5a2.5 2.5 0 0 1-5 0 2.5 2.5 0 0 1 5 0Z"/></svg>`, name: 'JWT Decoder' }
        ]},
        { type: 'category', title: 'Generators', tools: [
          { id: 'password', icon: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect><path d="M7 11V7a5 5 0 0 1 10 0v4"></path></svg>`, name: 'Password' },
          { id: 'code', icon: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><polyline points="16 18 22 12 16 6"></polyline><polyline points="8 6 2 12 8 18"></polyline></svg>`, name: 'Code' },
          { id: 'uuid', icon: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><circle cx="12" cy="12" r="10"></circle><line x1="2" y1="12" x2="22" y2="12"></line><path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"></path></svg>`, name: 'UUID' },
          { id: 'hash', icon: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><circle cx="12" cy="12" r="7"></circle><path d="M12 2v2m0 16v2M4.93 4.93l1.41 1.41m11.32 11.32l1.41 1.41M2 12h2m16 0h2M6.34 17.66l-1.41 1.41M19.07 4.93l-1.41 1.41"></path></svg>`, name: 'Hash' },
          { id: 'unix', icon: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><circle cx="12" cy="12" r="10"/><polyline points="12 6 12 12 16 14"/></svg>`, name: 'Timestamp' }
        ]},
        { type: 'category', title: 'Games', tools: [
          { id: 'codebreaker', icon: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M12 16h.01"/><path d="M12 12h.01"/><path d="M12 8h.01"/><path d="M12 4h.01"/><path d="M17 4h.01"/><path d="M7 8h.01"/><path d="M12 20a8 8 0 0 0 8-8"/></svg>`, name: 'Code Breaker' },
          { id: 'wordle', icon: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="3" y1="9" x2="21" y2="9"></line><line x1="9" y1="21" x2="9" y2="9"></line></svg>`, name: 'Wordle' },
          { id: 'snake', icon: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M8.5 10.5c-1 0-1.5-1-1.5-1.5s.5-1.5 1.5-1.5S10 8 10 8.5 9.5 10.5 8.5 10.5z"/><path d="M15.5 10.5c-1 0-1.5-1-1.5-1.5s.5-1.5 1.5-1.5S17 8 17 8.5s-.5 2-1.5 2z"/><path d="M5.5 6.5C3 6.5 1 4.5 1 2V1.5c0-1 .5-1.5 1-1.5h20c.5 0 1 .5 1 1.5V2c0 2.5-2 4.5-4.5 4.5"/><path d="M5.5 6.5c0 2 1.5 3.5 3.5 3.5s3.5-1.5 3.5-3.5"/><path d="M12 6.5c0 2 1.5 3.5 3.5 3.5s3.5-1.5 3.5-3.5"/><path d="M2.5 11.5c-1 0-1.5 1-1.5 2v4c0 1 .5 1.5 1.5 1.5h19c1 0 1.5-.5 1.5-1.5v-4c0-1-.5-2-1.5-2"/></svg>`, name: 'Snake' },
          { id: 'pong', icon: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M18.5 4.5H19"/><path d="M6 12H5"/><path d="M4.5 19.5H5"/><path d="M19.5 19.5H19"/><circle cx="12" cy="12" r="1"/><path d="M15.5 15.5.5.5"/></svg>`, name: 'Pong' }
        ]},
        { type: 'category', title: 'Settings', tools: [
          { id: 'settings', icon: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><circle cx="12" cy="12" r="3"></circle><path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path></svg>`, name: 'Appearance' }
        ]}
    ];
    navStructure.forEach(item => { if(item.type === 'tab') { const tab = document.createElement('div'); tab.className = `tab ${item.id === 'home' ? 'active' : ''}`; tab.dataset.target = `panel-${item.id}`; tab.innerHTML = `${item.icon} ${item.name}`; navMenu.appendChild(tab); } else if (item.type === 'category') { const categoryDiv = document.createElement('div'); categoryDiv.className = 'nav-category'; const toggleButton = document.createElement('button'); toggleButton.className = 'category-toggle'; toggleButton.innerHTML = `<span>${item.title}</span>`; categoryDiv.appendChild(toggleButton); const contentDiv = document.createElement('div'); contentDiv.className = 'category-content'; const innerDiv = document.createElement('div'); item.tools.forEach(tool => { const tab = document.createElement('div'); tab.className = 'tab'; tab.dataset.target = `panel-${tool.id}`; tab.innerHTML = `${tool.icon} ${tool.name}`; innerDiv.appendChild(tab); }); contentDiv.appendChild(innerDiv); categoryDiv.appendChild(contentDiv); navMenu.appendChild(categoryDiv); } });
    
    // --- ALL PANEL DEFINITIONS ---
    addPanel('home', 'Developer Hub', `<p class="muted">A collection of essential tools for developers. Use the sidebar to navigate or the search below to filter tools.</p><div class="field"><input type="search" id="search-tools" placeholder="Search for a tool..."></div>`, p => {const searchInput=$('search-tools'),tabs=[...document.querySelectorAll('.tab:not([data-target=panel-home])')],categories=[...document.querySelectorAll('.nav-category')];searchInput.addEventListener('input',e=>{const term=e.target.value.toLowerCase();tabs.forEach(tab=>{const text=tab.textContent.toLowerCase();tab.style.display=text.includes(term)?'flex':'none'});categories.forEach(cat=>{const visibleTabs=[...cat.querySelectorAll('.tab')].some(t=>t.style.display!=='none');cat.style.display=visibleTabs?'block':'none'})})});
    addPanel('settings', 'Appearance', `<p class="muted">Customize the look and feel of the app.</p><div class="field"><label>Theme</label><div id="theme-selector" class="theme-grid"></div></div><div class="field" id="pastel-picker-container" style="display:none; margin-top: 16px;"><label>Custom Pastel Base Color</label></div>`, p => {const html = document.documentElement, pickerContainer = $('pastel-picker-container'), grid = $('theme-selector'); const themes = [ {id:'cosmic', name:'Cosmic', colors:['hsl(250, 80%, 65%)','hsl(240, 5%, 20%)']}, {id:'ocean', name:'Ocean', colors:['hsl(215, 80%, 65%)','hsl(190, 80%, 50%)']}, {id:'cotton-candy', name:'Candy', colors:['hsl(328, 100%, 72%)','hsl(260, 88%, 70%)']}, {id:'geometry-dash', name:'Geometry', colors:['hsl(180, 95%, 50%)','hsl(50, 100%, 60%)']}, {id:'stormy-night', name:'Stormy', colors:['hsl(220, 90%, 60%)','hsl(240, 10%, 30%)']}, {id:'galaxy', name:'Galaxy', colors:['hsl(220, 90%, 60%)','hsl(250, 80%, 65%)']}, {id:'rustic', name:'Rustic', colors:['hsl(25, 80%, 50%)','hsl(35, 15%, 30%)']}, {id:'fox', name:'Fox', colors:['hsl(20, 100%, 55%)','hsl(0, 0%, 13%)']}, {id:'amethyst',name:'Amethyst',colors:['hsl(267, 84%, 74%)','hsl(260, 20%, 40%)']}, {id:'green', name:'Forest Green',colors:['hsl(142, 71%, 45%)','hsl(140, 30%, 18%)']}, {id:'custom-pastel', name:'Custom', colors:[]} ]; themes.forEach(t => { const swatch = document.createElement('div'); swatch.className = 'theme-swatch'; swatch.dataset.theme = t.id; swatch.innerHTML = `<div class="color-dots">${t.colors.map(c => `<div class="color-dot" style="background:${c}"></div>`).join('')}${t.id === 'custom-pastel' ? '<input type="color" id="pastel-picker" value="#a855f7" style="width:100%; height:100%; opacity:0; position:absolute; cursor:pointer;">' : ''}</div><span class="theme-name">${t.name}</span>`; grid.appendChild(swatch) }); const apply = (t) => { html.dataset.theme = t; localStorage.setItem('appTheme', t); document.querySelectorAll('.theme-swatch').forEach(s => s.classList.toggle('active', s.dataset.theme === t)); pickerContainer.style.display = t === 'custom-pastel' ? 'flex' : 'none' }; grid.addEventListener('click', e => { const swatch = e.target.closest('.theme-swatch'); if (swatch) apply(swatch.dataset.theme) }); const hexToHsl=(H)=>{let r=0,g=0,b=0;if(H.length==4){r="0x"+H[1]+H[1];g="0x"+H[2]+H[2];b="0x"+H[3]+H[3]}else if(H.length==7){r="0x"+H[1]+H[2];g="0x"+H[3]+H[4];b="0x"+H[5]+H[6]}r/=255;g/=255;b/=255;let cmin=Math.min(r,g,b),cmax=Math.max(r,g,b),delta=cmax-cmin,h=0,s=0;if(delta==0)h=0;else if(cmax==r)h=((g-b)/delta)%6;else if(cmax==g)h=(b-r)/delta+2;else h=(r-g)/delta+4;h=Math.round(h*60);if(h<0)h+=360;s=delta==0?0:delta/(1-Math.abs(2*(cmax+cmin)/2-1));s=+(s*100).toFixed(1);return {h,s}};const updatePastel=(color)=>{const{h,s}=hexToHsl(color);html.style.setProperty('--custom-hue',h);html.style.setProperty('--custom-saturation',`${s}%`);localStorage.setItem('pastelColor',color)};document.body.addEventListener('input',e=>{if(e.target.id==='pastel-picker')updatePastel(e.target.value)});const savedTheme=localStorage.getItem('appTheme')||'cosmic';apply(savedTheme);const savedColor=localStorage.getItem('pastelColor')||'#a855f7';updatePastel(savedColor);const picker=$('pastel-picker');if(picker)picker.value=savedColor;});
    // All other panel definitions go here...
    
      // --- Initialize the App ---
      setupUI();
      animateTitleAndFavicon();
    });
  </script>
</body>
</html>
